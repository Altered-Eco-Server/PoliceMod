// Copyright (c) Strange Loop Games. All rights reserved.
// See LICENSE file in the project root for full license information.
// <auto-generated from WorldObjectTemplate.tt />

namespace Eco.Mods.TechTree
{
    using System;
    using System.Threading;
    using System.Collections.Generic;
    using System.ComponentModel;
    using Eco.Core.Items;
    using Eco.Gameplay.Blocks;
    using Eco.Gameplay.Components;
    using Eco.Gameplay.Components.Auth;
    using Eco.Gameplay.DynamicValues;
    using Eco.Gameplay.Economy;
    using Eco.Gameplay.Housing;
    using Eco.Gameplay.Interactions;
    using Eco.Gameplay.Items;
    using Eco.Gameplay.Modules;
    using Eco.Gameplay.Minimap;
    using Eco.Gameplay.Objects;
    using Eco.Gameplay.Players;
    using Eco.Gameplay.Property;
    using Eco.Gameplay.Skills;
    using Eco.Gameplay.Systems.TextLinks;
    using Eco.Gameplay.Pipes.LiquidComponents;
    using Eco.Gameplay.Pipes.Gases;
    using Eco.Gameplay.Systems.Tooltip;
    using Eco.Shared;
    using Eco.Shared.Math;
    using Eco.Shared.Localization;
    using Eco.Shared.Serialization;
    using Eco.Shared.Utils;
    using Eco.Shared.View;
    using Eco.Shared.Items;
    using Eco.Gameplay.Pipes;
    using Eco.World.Blocks;
    using Eco.Gameplay.Housing.PropertyValues;

    [Serialized]
    [RequireComponent(typeof(PropertyAuthComponent))]
    [RequireComponent(typeof(SolidAttachedSurfaceRequirementComponent))]
    public partial class TollBarrierObject : DoorObject, IRepresentsItem
    {
        [Serialized] public bool Barrier = true;
        public override LocString DisplayName { get { return Localizer.DoStr("Toll Barrier"); } }
        public override TableTextureMode TableTexture => TableTextureMode.Stone;
        public virtual Type RepresentedItemType { get { return typeof(TollBarrierItem); } }
        public int i = 0;

        protected override void Initialize()
        {
            this.ModsPreInitialize();
            base.Initialize();

            this.ModsPostInitialize();
        }

        public override InteractResult OnActRight(InteractionContext context)
        {
            var user = context.Player.User;
            var isAdmin = user.IsAdminOrDev;
            var selectedItem = user.Inventory.Toolbar.SelectedItem;

            if (selectedItem is BadgeItem || isAdmin)
            {
                Barrier = !Barrier;
                return InteractResult.Success;
            }

            if (selectedItem is ReceiptItem)
            {
                user.Inventory.TryRemoveItem<ReceiptItem>(user);
                Barrier = !Barrier;
                return InteractResult.SuccessLoc($"You may now drive thru... Hurry!!");
            }
            return InteractResult.FailureLoc($"Pay Parking ticket by buying a gate pass, then right click with gate pass in hand to open. Closes after 10 seconds!!!!!");
        }

        public override void Tick()
        {
            base.Tick();
            SetAnimatedState("opengate", this.Operating && Barrier);
            Barrier = false;
        }

        private void Destroy()
        {

        }

        /// <summary>Hook for mods to customize WorldObject before initialization. You can change housing values here.</summary>
        partial void ModsPreInitialize();
        /// <summary>Hook for mods to customize WorldObject after initialization.</summary>
        partial void ModsPostInitialize();
    }

    [Serialized]
    [LocDisplayName("Toll Barrier")]
    [Category("Hidden"), Tag("NotInBrowser")]
    public partial class TollBarrierItem : WorldObjectItem<TollBarrierObject>
    {
        public override LocString DisplayDescription => Localizer.DoStr("");
        public override DirectionAxisFlags RequiresSurfaceOnSides { get; } = 0
                    | DirectionAxisFlags.Down
                ;

    }
}
